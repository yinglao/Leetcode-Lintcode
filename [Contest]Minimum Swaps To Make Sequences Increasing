#We have two integer sequences A and B of the same non-zero length.
#
#We are allowed to swap elements A[i] and B[i].  Note that both elements are in the same index position in their respective sequences.
#
#At the end of some number of swaps, A and B are both strictly increasing.  (A sequence is strictly increasing if and only if A[0] < A[1] < A[2] < ... < A[A.length - 1].)
#
#Given A and B, return the minimum number of swaps to make both sequences strictly increasing.  It is guaranteed that the given input always makes it possible.
#
#Example:
#Input: A = [1,3,5,4], B = [1,2,3,7]
#Output: 1
#Explanation: 
#Swap A[3] and B[3].  Then the sequences are:
#A = [1, 3, 5, 7] and B = [1, 2, 3, 4]
#which are both strictly increasing.
#Note:
#
#A, B are arrays with the same length, and that length will be in the range [1, 1000].
#A[i], B[i] are integer values in the range [0, 2000].

#下面用dynamic programing 做，思路是记录F(i,j) = min swap number given A[i:j+1] and B[i:j+1]， 然后用4个矩阵分别记录在获得F(i,j)的时候，对应的A和B的开头和结尾数字。每次更新F(i,j)，在首尾数字大小允许的情况下，最多有2*(j + 1 - i)种情况可供选择：
#调换A[i:k+1] B[i:k+1] 
#调换A[k+1:j] B[k+1:j]
# k = i,...j
#并同时更新四个记录矩阵
#Initially, dp[i][i] = 0, 两个记录A的矩阵的对角线元素都是M[i][i] = A[i]，两个记录A的矩阵的对角线元素都是N[i][i] = B[i]。
#T(n) = O(n^3)
#S(n) = O(n^2)

class Solution(object):
    def minSwap3(self, A, B):
        """
        :type A: List[int]
        :type B: List[int]
        :rtype: int
        """
        dp = [[0 for i in range(len(A))] for j in range(len(B))]
        firstA = [[0 for i in range(len(A))] for j in range(len(B))]
        lastA= [[0 for i in range(len(A))] for j in range(len(B))]
        firstB = [[0 for i in range(len(A))] for j in range(len(B))]
        lastB = [[0 for i in range(len(A))] for j in range(len(B))]
        for i in range(len(A)):
            firstA[i][i] = A[i]
            lastA[i][i] = A[i]
            firstB[i][i] = B[i]
            lastB[i][i] = B[i]
        for j in range(1, len(B)):
            for i in range(j - 1, -1, -1):
                noSwap = sys.maxint
                noSwapFirstA = firstA[i][i]
                noSwapLastA = lastA[i + 1][j]
                noSwapFirstB = firstB[i][i]
                noSwapLastB = lastB[i + 1][j]
                for k in range(i, j):
                    if lastA[i][k] < firstA[k + 1][j] and lastB[i][k] < firstB[k + 1][j]:
                        if dp[i][k] + dp[k + 1][j] < noSwap:
                            noSwapFirstA = firstA[i][k]
                            noSwapLastA = lastA[k + 1][j]
                            noSwapFirstB = firstB[i][k]
                            noSwapLastB = lastB[k + 1][j]
                            noSwap = dp[i][k] + dp[k + 1][j]
                withSwap = sys.maxint
                for k in range(i, j):
                    if lastA[i][k] < firstB[k + 1][j] and lastB[i][k] < firstA[k + 1][j]:
                        swapLeft = k + 1 - i - dp[i][k] + dp[k + 1][j]
                        swapRight = dp[i][k] + j - k - dp[k + 1][j]
                        if swapLeft >= swapRight and swapRight < withSwap:
                            withSwap = swapRight
                            withSwapFirstA = firstA[i][k]
                            withSwapFirstB = firstB[i][k]
                            withSwapLastA = lastB[k + 1][j]
                            withSwapLastB = lastA[k + 1][j]
                        elif swapRight > swapLeft and swapLeft < withSwap:
                            withSwap = swapLeft
                            withSwapFirstA = firstB[i][k]
                            withSwapFirstB = firstA[i][k]
                            withSwapLastA = lastA[k + 1][j]
                            withSwapLastB = lastB[k + 1][j]
                if noSwap <= withSwap:
                    dp[i][j] = noSwap
                    firstA[i][j] = noSwapFirstA
                    firstB[i][j] = noSwapFirstB
                    lastA[i][j] = noSwapLastA
                    lastB[i][j] = noSwapLastB
                else:
                    dp[i][j] = withSwap
                    firstA[i][j] = withSwapFirstA
                    firstB[i][j] = withSwapFirstB
                    lastA[i][j] = withSwapLastA
                    lastB[i][j] = withSwapLastB 
        #print dp
        return dp[0][-1]
        
 # 以下用Uniform search 来做，相当于BFS
 #T(n) = 2^n
 #S(n) = n * 2^n
    
    def minSwap2(self, A, B):
        """
        :type A: List[int]
        :type B: List[int]
        :rtype: int
        """
        h = [[0, [A[0]], [B[0]]], [1, [B[0]], [A[0]]]]
        import heapq
        heapq.heapify(h)
        while h:
            count, nA, nB = heapq.heappop(h)
            if len(nA) == len(A):
                return count
            a = A[len(nA)]
            b = B[len(nB)]
            if a > nA[-1] and b > nB[-1]:
                heapq.heappush(h, [count, nA + [a], nB + [b]])
            if a > nB[-1] and b > nA[-1]:
                heapq.heappush(h, [count + 1, nA + [b], nB + [a]])
# 下面是一维的dp，注意到对于每个i，有三种情况，必须交换，不可交换，以及可换可不换，情况的复杂度主要源自第三种情况。进一步观察可发现，在必须交换的情况下，有两种选择：交换前面，和交换后面，其中交换前面只需要处理到上一个可换可不换的j处（last）即可。所以可以建立一个swaplist来记录每个位置是否发生交换，遇到可换可不换的情况时，更新last参数，遇到在必须交换的情况下，比较两种选择，并按交换次数少的一种分别更新swaplist和A,B.这样每次更新需要O(n)时间。
# T(n) = O(n^2)
# S(n) = O(n)

#这类题需要仔细观察获取题目特征才能降低时间复杂度，纯粹按套路来的话很有可能会导致复杂的计算量。


    def minSwap(self, A, B):
        """
        :type A: List[int]
        :type B: List[int]
        :rtype: int
        """    
        dp = [0 for i in range(len(A))]
        swaplist = [0 for i in range(len(A))] # 0 for non-swap and 1 for swap
        last = 0
        for i in range(1, len(A)):
            if self.swapable(A, B, i):
                last = i
                dp[i] = dp[i - 1]
            elif A[i] > A[i - 1] and B[i] > B[i - 1]:
                dp[i] = dp[i - 1]
            elif A[i] > B[i - 1] and B[i] > A[i - 1]:
                swapleft = 0
                swapright = 1
                for j in range(last, i):
                    swapleft += 1 - swaplist[j]
                    swapright += swaplist[j]
                if swapleft < swapright:
                    for j in range(last, i):
                        swaplist[j] = 1 - swaplist[j]
                        A[j], B[j] = B[j], A[j]
                else:
                    swaplist[i] = 1
                    A[i], B[i] = B[i], A[i]
        return sum(swaplist)
                
                
    def swapable(self, A, B, i):
        return A[i] > A[i - 1] and A[i] > B[i - 1] and B[i] > B[i - 1] and B[i] > A[i - 1]
